record <- xpathSApply(data,node.definer.record,xmlValue)
# get the record data from xml data
record <- record[6:(length(record)-3)]
# clean the record vector (delete the head and tail)
record <- record[nchar(gsub("\\s","",record))!=0]
# delete the space-only records
record <- record[!grepl("\n",record)]
tour.seq.1 <- c(30,16,8,4,2)
tour.seq.2 <- c(28,16,8,4,2)
tour.seq.3 <- c(48,16,8,4,2)
sum1 <- sum(tour.seq.1)
sum2 <- sum(tour.seq.2)
sum3 <- sum(tour.seq.3)
record
record <- append(record,NA,after=633)
record <- append(record,NA,after=352)
record <- append(record,NA,after=179)
home.team <- rep(record[seq(from=1,to=length(record),by=6)],each=2)
home.ctry <- rep(record[seq(from=2,to=length(record),by=6)],each=2)
away.team <- rep(record[seq(from=3,to=length(record),by=6)],each=2)
away.ctry <- rep(record[seq(from=4,to=length(record),by=6)],each=2)
# generate the names of teams and countries
match1 <- record[seq(from=5,to=length(record),by=6)]
match2 <- record[seq(from=6,to=length(record),by=6)]
# generate two-round match scores (with unequal length)
match <- c(as.vector(rbind(match1,match2)))
match.number <- length(match)
tour <- mapply(rep,tour,c(sum1,sum2,sum3),simplify=TRUE)
# get the established list of tournament
round <- mapply(rep,round,c(tour.seq.1,tour.seq.2,tour.seq.3),simplify=TRUE)
# get list of round names (but in list form)
tourlist <- c()
for (i in 1:length(tour)) {
tourlist <- c(tourlist,c(tour[[i]]))
}
# convert the list form tournament names into vector form
roundlist <- c()
for (i in 1:length(round)) {
roundlist <- c(roundlist,c(round[[i]]))
}
tour.seq.1 <- c(30,16,8,4,2)
tour.seq.2 <- c(28,16,8,4,2)
tour.seq.3 <- c(48,24,12,4,4,2)
sum1 <- sum(tour.seq.1)
sum2 <- sum(tour.seq.2)
sum3 <- sum(tour.seq.3)
tour <- mapply(rep,tour,c(sum1,sum2,sum3),simplify=TRUE)
# get the established list of tournament
round <- mapply(rep,round,c(tour.seq.1,tour.seq.2,tour.seq.3),simplify=TRUE)
# get list of round names (but in list form)
tourlist <- c()
for (i in 1:length(tour)) {
tourlist <- c(tourlist,c(tour[[i]]))
}
# convert the list form tournament names into vector form
roundlist <- c()
for (i in 1:length(round)) {
roundlist <- c(roundlist,c(round[[i]]))
}
tour <- mapply(rep,tour,c(sum1,sum2,sum3),simplify=TRUE)
tour.raw <- xpathSApply(data,node.definer.tour,xmlValue)
round.raw <- xpathSApply(data,node.definer.round,xmlValue)
# get the tournament name and round name (raw data)
tour <- substr(tour.raw,2,nchar(tour.raw)-1)
round <- substr(round.raw,2,nchar(round.raw)-1)
our <- mapply(rep,tour,c(sum1,sum2,sum3),simplify=TRUE)
# get the established list of tournament
round <- mapply(rep,round,c(tour.seq.1,tour.seq.2,tour.seq.3),simplify=TRUE)
tour <- mapply(rep,tour,c(sum1,sum2,sum3),simplify=TRUE)
tourlist <- c()
for (i in 1:length(tour)) {
tourlist <- c(tourlist,c(tour[[i]]))
}
# convert the list form tournament names into vector form
roundlist <- c()
for (i in 1:length(round)) {
roundlist <- c(roundlist,c(round[[i]]))
}
rm(round,tour,round.raw,tour.raw)
rm(match1,match2)
rm(tour.seq.1,tour.seq.2,tour.seq.3)
rm(sum1,sum2,sum3)
dfrm.raw <- cbind(home.team=home.team,home.ctry=home.ctry,away.team=away.team,
away.ctry=away.ctry,match=match,tournament=tourlist,round=roundlist)
dfrm <- dfrm.raw[complete.cases(dfrm.raw[,5]),]
rm(dfrm.raw)
write.table(dfrm,"dfrm.1965.csv")
url <- "http://kassiesa.home.xs4all.nl/bert/uefa/data/method1/match1976.html"
# enter the url for data retrieving
data <- xmlRoot(htmlTreeParse(url,useInternal=T, encoding="UTF-8"))
#encoding of UTF-8 can solve the accent problems
node.definer.tour <- "//div[@style='line-height: 56px; border: 2px solid #999999;']"
node.definer.round <- "//div[@style='line-height: 36px; border: 2px solid #999999;']"
node.definer.record <- "//td"
tour.raw <- xpathSApply(data,node.definer.tour,xmlValue)
round.raw <- xpathSApply(data,node.definer.round,xmlValue)
# get the tournament name and round name (raw data)
tour <- substr(tour.raw,2,nchar(tour.raw)-1)
round <- substr(round.raw,2,nchar(round.raw)-1)
# get the basic elements of tournament and round
record <- xpathSApply(data,node.definer.record,xmlValue)
record <- record[6:(length(record)-3)]
record <- record[nchar(gsub("\\s","",record))!=0]
record <- record[!grepl("\n",record)]
record <- record[!grepl("coin",record)]
tour.seq.1 <- c(32,16,8,4,2)
tour.seq.2 <- c(32,16,8,4,2)
tour.seq.3 <- c(64,32,16,8,4,2)
sum1 <- sum(tour.seq.1)
sum2 <- sum(tour.seq.2)
sum3 <- sum(tour.seq.3)
record
record <- append(record,NA,after=657)
record <- append(record,NA,after=368)
record <- append(record,NA,after=185)
home.team <- rep(record[seq(from=1,to=length(record),by=6)],each=2)
home.ctry <- rep(record[seq(from=2,to=length(record),by=6)],each=2)
away.team <- rep(record[seq(from=3,to=length(record),by=6)],each=2)
away.ctry <- rep(record[seq(from=4,to=length(record),by=6)],each=2)
# generate the names of teams and countries
match1 <- record[seq(from=5,to=length(record),by=6)]
match2 <- record[seq(from=6,to=length(record),by=6)]
# generate two-round match scores (with unequal length)
match <- c(as.vector(rbind(match1,match2)))
match.number <- length(match)
tour <- mapply(rep,tour,c(sum1,sum2,sum3),simplify=TRUE)
# get the established list of tournament
round <- mapply(rep,round,c(tour.seq.1,tour.seq.2,tour.seq.3),simplify=TRUE)
# get list of round names (but in list form)
tourlist <- c()
for (i in 1:length(tour)) {
tourlist <- c(tourlist,c(tour[[i]]))
}
# convert the list form tournament names into vector form
roundlist <- c()
for (i in 1:length(round)) {
roundlist <- c(roundlist,c(round[[i]]))
}
rm(round,tour,round.raw,tour.raw)
rm(match1,match2)
rm(tour.seq.1,tour.seq.2,tour.seq.3)
rm(sum1,sum2,sum3)
dfrm.raw <- cbind(home.team=home.team,home.ctry=home.ctry,away.team=away.team,
away.ctry=away.ctry,match=match,tournament=tourlist,round=roundlist)
dfrm <- dfrm.raw[complete.cases(dfrm.raw[,5]),]
rm(dfrm.raw)
dfrm
url <- "http://kassiesa.home.xs4all.nl/bert/uefa/data/method1/match1976.html"
# enter the url for data retrieving
data <- xmlRoot(htmlTreeParse(url,useInternal=T, encoding="UTF-8"))
#encoding of UTF-8 can solve the accent problems
node.definer.tour <- "//div[@style='line-height: 56px; border: 2px solid #999999;']"
node.definer.round <- "//div[@style='line-height: 36px; border: 2px solid #999999;']"
node.definer.record <- "//td"
tour.raw <- xpathSApply(data,node.definer.tour,xmlValue)
round.raw <- xpathSApply(data,node.definer.round,xmlValue)
# get the tournament name and round name (raw data)
tour <- substr(tour.raw,2,nchar(tour.raw)-1)
round <- substr(round.raw,2,nchar(round.raw)-1)
# get the basic elements of tournament and round
tour.seq.1 <- c(32,16,8,4,2)
tour.seq.2 <- c(32,16,8,4,2)
tour.seq.3 <- c(64,32,16,8,4,2)
sum1 <- sum(tour.seq.1)
sum2 <- sum(tour.seq.2)
sum3 <- sum(tour.seq.3)
### this block is used to
record <- xpathSApply(data,node.definer.record,xmlValue)
record <- record[6:(length(record)-3)]
record <- record[nchar(gsub("\\s","",record))!=0]
record <- record[!grepl("\n",record)]
record <- record[!grepl("coin",record)]
record <- append(record,NA,after=657)
record <- append(record,NA,after=368)
record <- append(record,NA,after=185)
record
record <- xpathSApply(data,node.definer.record,xmlValue)
record <- record[6:(length(record)-3)]
record <- record[nchar(gsub("\\s","",record))!=0]
record <- record[!grepl("\n",record)]
record <- record[!grepl("coin",record)]
record <- append(record,NA,after=657)
record <- append(record,NA,after=370)
record <- append(record,NA,after=185)
record
home.team <- rep(record[seq(from=1,to=length(record),by=6)],each=2)
home.ctry <- rep(record[seq(from=2,to=length(record),by=6)],each=2)
away.team <- rep(record[seq(from=3,to=length(record),by=6)],each=2)
away.ctry <- rep(record[seq(from=4,to=length(record),by=6)],each=2)
# generate the names of teams and countries
match1 <- record[seq(from=5,to=length(record),by=6)]
match2 <- record[seq(from=6,to=length(record),by=6)]
# generate two-round match scores (with unequal length)
match <- c(as.vector(rbind(match1,match2)))
match.number <- length(match)
tour <- mapply(rep,tour,c(sum1,sum2,sum3),simplify=TRUE)
# get the established list of tournament
round <- mapply(rep,round,c(tour.seq.1,tour.seq.2,tour.seq.3),simplify=TRUE)
# get list of round names (but in list form)
tourlist <- c()
for (i in 1:length(tour)) {
tourlist <- c(tourlist,c(tour[[i]]))
}
# convert the list form tournament names into vector form
roundlist <- c()
for (i in 1:length(round)) {
roundlist <- c(roundlist,c(round[[i]]))
}
# convert the list form round names into vector form
rm(round,tour,round.raw,tour.raw)
rm(match1,match2)
rm(tour.seq.1,tour.seq.2,tour.seq.3)
rm(sum1,sum2,sum3)
dfrm.raw <- cbind(home.team=home.team,home.ctry=home.ctry,away.team=away.team,
away.ctry=away.ctry,match=match,tournament=tourlist,round=roundlist)
dfrm <- dfrm.raw[complete.cases(dfrm.raw[,5]),]
rm(dfrm.raw)
dfrm <- cbind(dfrm,rep(1976,nrow(dfrm)))
write.csv(dfrm,"dfrm.1976.csv")
url <- "http://kassiesa.home.xs4all.nl/bert/uefa/data/method1/match1977.html"
# enter the url for data retrieving
data <- xmlRoot(htmlTreeParse(url,useInternal=T, encoding="UTF-8"))
#encoding of UTF-8 can solve the accent problems
node.definer.tour <- "//div[@style='line-height: 56px; border: 2px solid #999999;']"
node.definer.round <- "//div[@style='line-height: 36px; border: 2px solid #999999;']"
node.definer.record <- "//td"
tour.raw <- xpathSApply(data,node.definer.tour,xmlValue)
round.raw <- xpathSApply(data,node.definer.round,xmlValue)
# get the tournament name and round name (raw data)
tour <- substr(tour.raw,2,nchar(tour.raw)-1)
round <- substr(round.raw,2,nchar(round.raw)-1)
tour.seq.1 <- c(32,16,8,4,2)
tour.seq.2 <- c(2,32,16,8,4,2)
tour.seq.3 <- c(64,32,16,8,4,2)
sum1 <- sum(tour.seq.1)
sum2 <- sum(tour.seq.2)
sum3 <- sum(tour.seq.3)
record <- xpathSApply(data,node.definer.record,xmlValue)
# get the record data from xml data
record <- record[6:(length(record)-3)]
# clean the record vector (delete the head and tail)
record <- record[nchar(gsub("\\s","",record))!=0]
# delete the space-only records
record <- record[!grepl("\n",record)]
# delete special lines including "\n"
record <- record[!grepl("coin",record)]
record
record <- append(record,NA,after=376)
record <- append(record,NA,after=185)
home.team <- rep(record[seq(from=1,to=length(record),by=6)],each=2)
home.ctry <- rep(record[seq(from=2,to=length(record),by=6)],each=2)
away.team <- rep(record[seq(from=3,to=length(record),by=6)],each=2)
away.ctry <- rep(record[seq(from=4,to=length(record),by=6)],each=2)
# generate the names of teams and countries
match1 <- record[seq(from=5,to=length(record),by=6)]
match2 <- record[seq(from=6,to=length(record),by=6)]
# generate two-round match scores (with unequal length)
match <- c(as.vector(rbind(match1,match2)))
match.number <- length(match)
tour <- mapply(rep,tour,c(sum1,sum2,sum3),simplify=TRUE)
# get the established list of tournament
round <- mapply(rep,round,c(tour.seq.1,tour.seq.2,tour.seq.3),simplify=TRUE)
# get list of round names (but in list form)
tourlist <- c()
for (i in 1:length(tour)) {
tourlist <- c(tourlist,c(tour[[i]]))
}
# convert the list form tournament names into vector form
roundlist <- c()
for (i in 1:length(round)) {
roundlist <- c(roundlist,c(round[[i]]))
}
rm(round,tour,round.raw,tour.raw)
rm(match1,match2)
rm(tour.seq.1,tour.seq.2,tour.seq.3)
rm(sum1,sum2,sum3)
# remove unecessary variables
### combine all the data and trim the tail according to match.number
dfrm.raw <- cbind(home.team=home.team,home.ctry=home.ctry,away.team=away.team,
away.ctry=away.ctry,match=match,tournament=tourlist,round=roundlist)
dfrm <- dfrm.raw[complete.cases(dfrm.raw[,5]),]
rm(dfrm.raw)
dfrm <- cbind(dfrm,rep(1977,nrow(dfrm)))
write.csv(dfrm,"dfrm.1977.csv")
url <- "http://kassiesa.home.xs4all.nl/bert/uefa/data/method1/match1978.html"
# enter the url for data retrieving
data <- xmlRoot(htmlTreeParse(url,useInternal=T, encoding="UTF-8"))
#encoding of UTF-8 can solve the accent problems
node.definer.tour <- "//div[@style='line-height: 56px; border: 2px solid #999999;']"
node.definer.round <- "//div[@style='line-height: 36px; border: 2px solid #999999;']"
node.definer.record <- "//td"
tour.raw <- xpathSApply(data,node.definer.tour,xmlValue)
round.raw <- xpathSApply(data,node.definer.round,xmlValue)
# get the tournament name and round name (raw data)
tour <- substr(tour.raw,2,nchar(tour.raw)-1)
round <- substr(round.raw,2,nchar(round.raw)-1)
tour.seq.1 <- c(30,16,8,4,2)
tour.seq.2 <- c(2,32,16,8,4,2)
tour.seq.3 <- c(64,32,16,8,4,2)
sum1 <- sum(tour.seq.1)
sum2 <- sum(tour.seq.2)
sum3 <- sum(tour.seq.3)
record <- xpathSApply(data,node.definer.record,xmlValue)
# get the record data from xml data
record <- record[6:(length(record)-3)]
# clean the record vector (delete the head and tail)
record <- record[nchar(gsub("\\s","",record))!=0]
# delete the space-only records
record <- record[!grepl("\n",record)]
# delete special lines including "\n"
record <- record[!grepl("coin",record)]
record
record <- append(record,NA,after=370)
record <- append(record,NA,after=179)
home.team <- rep(record[seq(from=1,to=length(record),by=6)],each=2)
home.ctry <- rep(record[seq(from=2,to=length(record),by=6)],each=2)
away.team <- rep(record[seq(from=3,to=length(record),by=6)],each=2)
away.ctry <- rep(record[seq(from=4,to=length(record),by=6)],each=2)
# generate the names of teams and countries
match1 <- record[seq(from=5,to=length(record),by=6)]
match2 <- record[seq(from=6,to=length(record),by=6)]
# generate two-round match scores (with unequal length)
match <- c(as.vector(rbind(match1,match2)))
match.number <- length(match)
tour <- mapply(rep,tour,c(sum1,sum2,sum3),simplify=TRUE)
# get the established list of tournament
round <- mapply(rep,round,c(tour.seq.1,tour.seq.2,tour.seq.3),simplify=TRUE)
# get list of round names (but in list form)
tourlist <- c()
for (i in 1:length(tour)) {
tourlist <- c(tourlist,c(tour[[i]]))
}
# convert the list form tournament names into vector form
roundlist <- c()
for (i in 1:length(round)) {
roundlist <- c(roundlist,c(round[[i]]))
}
rm(round,tour,round.raw,tour.raw)
rm(match1,match2)
rm(tour.seq.1,tour.seq.2,tour.seq.3)
rm(sum1,sum2,sum3)
# remove unecessary variables
### combine all the data and trim the tail according to match.number
dfrm.raw <- cbind(home.team=home.team,home.ctry=home.ctry,away.team=away.team,
away.ctry=away.ctry,match=match,tournament=tourlist,round=roundlist)
dfrm <- dfrm.raw[complete.cases(dfrm.raw[,5]),]
rm(dfrm.raw)
dfrm <- cbind(dfrm,rep(1978,nrow(dfrm)))
write.csv(dfrm,"dfrm.1978.csv")
url <- "http://kassiesa.home.xs4all.nl/bert/uefa/data/method1/match1979.html"
# enter the url for data retrieving
data <- xmlRoot(htmlTreeParse(url,useInternal=T, encoding="UTF-8"))
#encoding of UTF-8 can solve the accent problems
node.definer.tour <- "//div[@style='line-height: 56px; border: 2px solid #999999;']"
node.definer.round <- "//div[@style='line-height: 36px; border: 2px solid #999999;']"
node.definer.record <- "//td"
tour.raw <- xpathSApply(data,node.definer.tour,xmlValue)
round.raw <- xpathSApply(data,node.definer.round,xmlValue)
# get the tournament name and round name (raw data)
tour <- substr(tour.raw,2,nchar(tour.raw)-1)
round <- substr(round.raw,2,nchar(round.raw)-1)
# get the basic elements of tournament and round
tour.seq.1 <- c(2,32,16,8,4,2)
tour.seq.2 <- c(30,16,8,4,2)
tour.seq.3 <- c(64,32,16,8,4,2)
sum1 <- sum(tour.seq.1)
sum2 <- sum(tour.seq.2)
sum3 <- sum(tour.seq.3)
record <- xpathSApply(data,node.definer.record,xmlValue)
# get the record data from xml data
record <- record[6:(length(record)-3)]
# clean the record vector (delete the head and tail)
record <- record[nchar(gsub("\\s","",record))!=0]
# delete the space-only records
record <- record[!grepl("\n",record)]
# delete special lines including "\n"
record <- record[!grepl("coin",record)]
record <- append(record,NA,after=370)
record <- append(record,NA,after=191)
record
home.team <- rep(record[seq(from=1,to=length(record),by=6)],each=2)
home.ctry <- rep(record[seq(from=2,to=length(record),by=6)],each=2)
away.team <- rep(record[seq(from=3,to=length(record),by=6)],each=2)
away.ctry <- rep(record[seq(from=4,to=length(record),by=6)],each=2)
# generate the names of teams and countries
match1 <- record[seq(from=5,to=length(record),by=6)]
match2 <- record[seq(from=6,to=length(record),by=6)]
# generate two-round match scores (with unequal length)
match <- c(as.vector(rbind(match1,match2)))
match.number <- length(match)
tour <- mapply(rep,tour,c(sum1,sum2,sum3),simplify=TRUE)
# get the established list of tournament
round <- mapply(rep,round,c(tour.seq.1,tour.seq.2,tour.seq.3),simplify=TRUE)
# get list of round names (but in list form)
tourlist <- c()
for (i in 1:length(tour)) {
tourlist <- c(tourlist,c(tour[[i]]))
}
# convert the list form tournament names into vector form
roundlist <- c()
for (i in 1:length(round)) {
roundlist <- c(roundlist,c(round[[i]]))
}
rm(round,tour,round.raw,tour.raw)
rm(match1,match2)
rm(tour.seq.1,tour.seq.2,tour.seq.3)
rm(sum1,sum2,sum3)
# remove unecessary variables
### combine all the data and trim the tail according to match.number
dfrm.raw <- cbind(home.team=home.team,home.ctry=home.ctry,away.team=away.team,
away.ctry=away.ctry,match=match,tournament=tourlist,round=roundlist)
dfrm <- dfrm.raw[complete.cases(dfrm.raw[,5]),]
rm(dfrm.raw)
dfrm <- cbind(dfrm,rep(1979,nrow(dfrm)))
write.csv(dfrm,"dfrm.1979.csv")
url <- "http://kassiesa.home.xs4all.nl/bert/uefa/data/method1/match1980.html"
# enter the url for data retrieving
data <- xmlRoot(htmlTreeParse(url,useInternal=T, encoding="UTF-8"))
#encoding of UTF-8 can solve the accent problems
node.definer.tour <- "//div[@style='line-height: 56px; border: 2px solid #999999;']"
node.definer.round <- "//div[@style='line-height: 36px; border: 2px solid #999999;']"
node.definer.record <- "//td"
# define the node definer of different types of data
# first definer is tournament; second definer is round; third definer is record
tour.raw <- xpathSApply(data,node.definer.tour,xmlValue)
round.raw <- xpathSApply(data,node.definer.round,xmlValue)
# get the tournament name and round name (raw data)
tour <- substr(tour.raw,2,nchar(tour.raw)-1)
round <- substr(round.raw,2,nchar(round.raw)-1)
tour.seq.1 <- c(2,32,16,8,4,2)
tour.seq.2 <- c(4,32,16,8,4,2)
tour.seq.3 <- c(64,32,16,8,4,2)
sum1 <- sum(tour.seq.1)
sum2 <- sum(tour.seq.2)
sum3 <- sum(tour.seq.3)
record <- xpathSApply(data,node.definer.record,xmlValue)
# get the record data from xml data
record <- record[6:(length(record)-3)]
# clean the record vector (delete the head and tail)
record <- record[nchar(gsub("\\s","",record))!=0]
# delete the space-only records
record <- record[!grepl("\n",record)]
# delete special lines including "\n"
record <- record[!grepl("coin",record)]
record
record <- append(record,NA,after=386)
record <- append(record,NA,after=297)
record <- append(record,NA,after=297)
record <- append(record,NA,after=191)
home.team <- rep(record[seq(from=1,to=length(record),by=6)],each=2)
home.ctry <- rep(record[seq(from=2,to=length(record),by=6)],each=2)
away.team <- rep(record[seq(from=3,to=length(record),by=6)],each=2)
away.ctry <- rep(record[seq(from=4,to=length(record),by=6)],each=2)
# generate the names of teams and countries
match1 <- record[seq(from=5,to=length(record),by=6)]
match2 <- record[seq(from=6,to=length(record),by=6)]
# generate two-round match scores (with unequal length)
match <- c(as.vector(rbind(match1,match2)))
match.number <- length(match)
tour <- mapply(rep,tour,c(sum1,sum2,sum3),simplify=TRUE)
# get the established list of tournament
round <- mapply(rep,round,c(tour.seq.1,tour.seq.2,tour.seq.3),simplify=TRUE)
# get list of round names (but in list form)
tourlist <- c()
for (i in 1:length(tour)) {
tourlist <- c(tourlist,c(tour[[i]]))
}
# convert the list form tournament names into vector form
roundlist <- c()
for (i in 1:length(round)) {
roundlist <- c(roundlist,c(round[[i]]))
}
# convert the list form round names into vector form
rm(round,tour,round.raw,tour.raw)
rm(match1,match2)
rm(tour.seq.1,tour.seq.2,tour.seq.3)
rm(sum1,sum2,sum3)
dfrm.raw <- cbind(home.team=home.team,home.ctry=home.ctry,away.team=away.team,
away.ctry=away.ctry,match=match,tournament=tourlist,round=roundlist)
dfrm <- dfrm.raw[complete.cases(dfrm.raw[,5]),]
rm(dfrm.raw)
dfrm <- cbind(dfrm,rep(1980,nrow(dfrm)))
write.csv(dfrm,"dfrm.1980.csv")
install.packages("RMySQL")
library(RMySQL)
ucscDB <- dbConnect(MySQL(),user="genome",host="genome-mysql.cse.ucsc.edu")
ucscDB <- dbConnect(MySQL(),user="genome",host="genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(ucscDB,"show databases;"); dbDisconnect(ucscDB);
result
hg19 <- dbConnect(MySQL(),user="genome",db="hg19",host="genome-mysql.cse.ucsc.edu")
allTables <- dbListTables(hg19)
length(allTables)
dbListFields(hg19,"affyU133Plus2")
dbGetQuery(hg19,"select count(*) from affyU133Plus2")
affyData <- dbReadTable(hg19,"affyU133Plus2")
query <- dbSendQuery(hg19, "select * from affyU133Plus2 where misMatches between 1 and 3")
query
fetch(query)
affyMis <- fetch(query)
quantile(affyMis$misMatches)
affyMisSmall <- fetch(query,n=20); dbClearResult(query)
query
data <- read.csv("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv")
data <- read.csv("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv")
library(RCurl)
install.packages("RCurl")
library(RCurl)
x <- getURI("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv")
data <- read.csv(text=x)
names(data)
nrow(data[data$VAL>=1000000])
data$VAL>=1000000
